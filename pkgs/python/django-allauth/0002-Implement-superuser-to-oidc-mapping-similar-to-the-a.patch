From 1d1b16066fe3f75a178c9aad324b7200f0ceafa2 Mon Sep 17 00:00:00 2001
From: Maximilian Bosch <maximilian.bosch@mayflower.de>
Date: Sat, 12 Aug 2023 09:42:55 +0000
Subject: [PATCH 2/2] Implement superuser-to-oidc mapping similar to the
 approach from LDAP auth

With LDAP auth it was possible to define a `superuser group`, i.e.
each member of that group became a superuser in mailman. This patch
replicates this behavior with OIDC authentication:

* If no `groups`-output is part of the response (i.e. `extra_data`),
  nothing happens - as before.
* Otherwise it's checked if the user is member of a hardcoded `admin`
  group. And depending on whether or not, the superuser flag in `auth_user`
  is true or false.
---
 allauth/socialaccount/helpers.py | 18 ++++++++++++++----
 1 file changed, 14 insertions(+), 4 deletions(-)

diff --git a/allauth/socialaccount/helpers.py b/allauth/socialaccount/helpers.py
index eff1ca52..be2c9aa9 100644
--- a/allauth/socialaccount/helpers.py
+++ b/allauth/socialaccount/helpers.py
@@ -203,15 +229,24 @@ def _social_login_redirect(request, sociallogin):
     return HttpResponseRedirect(next_url)
 
 
+def _update_superuser_status(sociallogin):
+    user = _find_existing_user_by_email(user_email(sociallogin.user))
+    is_superuser = 'admin' in sociallogin.account.extra_data.get('groups', [])
+    user.is_superuser = is_superuser
+    user.save()
+
+
 def _complete_social_login(request, sociallogin):
     if request.user.is_authenticated:
         get_account_adapter(request).logout(request)
     if sociallogin.is_existing:
         # Login existing user
         ret = _login_social_account(request, sociallogin)
+        _update_superuser_status(sociallogin)
     else:
         # New social user
         ret = _process_signup(request, sociallogin)
+        _update_superuser_status(sociallogin)
     return ret
 
 

From a000ec22ebce1e49949375ed446a9169fd5f6a7e Mon Sep 17 00:00:00 2001
From: Maximilian Bosch <maximilian@mbosch.me>
Date: Mon, 5 Jun 2023 19:26:09 +0200
Subject: [PATCH] remove subscription check

---
 privacyidea/lib/subscriptions.py | 42 --------------------------------
 1 file changed, 42 deletions(-)

diff --git a/privacyidea/lib/subscriptions.py b/privacyidea/lib/subscriptions.py
index 0003ea68..ceb8309c 100644
--- a/privacyidea/lib/subscriptions.py
+++ b/privacyidea/lib/subscriptions.py
@@ -104,19 +104,6 @@ def subscription_status(component="privacyidea", tokentype=None):
 
     :return: subscription state
     """
-    token_count = get_tokens(assigned=True, active=True, count=True, tokentype=tokentype)
-    if token_count <= APPLICATIONS.get(component, 50):
-        return 0
-
-    subscriptions = get_subscription(component)
-    if len(subscriptions) == 0:
-        return 1
-
-    try:
-        check_subscription(component)
-    except SubscriptionError as exx:
-        log.warning(u"{0}".format(exx))
-        return 2
 
     return 3
 
@@ -259,35 +246,6 @@ def check_subscription(application, max_free_subscriptions=None):
         without a subscription file. If not given, the default is used.
     :return: bool
     """
-    if application.lower() in APPLICATIONS:
-        subscriptions = get_subscription(application) or get_subscription(
-            application.lower())
-        # get the number of users with active tokens
-        token_users = get_users_with_active_tokens()
-        free_subscriptions = max_free_subscriptions or APPLICATIONS.get(application.lower())
-        if len(subscriptions) == 0:
-            if subscription_exceeded_probability(token_users, free_subscriptions):
-                raise SubscriptionError(description="No subscription for your client.",
-                                        application=application)
-        else:
-            subscription = subscriptions[0]
-            expire_date = subscription.get("date_till")
-            if expire_date < datetime.datetime.now():
-                # subscription has expired
-                if raise_exception_probability(subscription):
-                    raise SubscriptionError(description="Your subscription "
-                                                        "expired.",
-                                            application=application)
-            else:
-                # subscription is still valid, so check the signature.
-                check_signature(subscription)
-                allowed_tokennums = subscription.get("num_tokens")
-                if subscription_exceeded_probability(token_users, allowed_tokennums):
-                    # subscription is exceeded
-                    raise SubscriptionError(description="Too many users "
-                                                        "with assigned tokens. "
-                                                        "Subscription exceeded.",
-                                            application=application)
 
     return True
 
-- 
2.40.1

